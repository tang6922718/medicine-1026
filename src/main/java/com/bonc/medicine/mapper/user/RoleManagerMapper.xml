<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.bonc.medicine.mapper.user.RoleManagerMapper">

    <insert id="createNewRole" parameterType="Map">
        insert into
          common_backend_user_role
        values
          (0, #{roleName}, #{createUserId}, now(), #{isWork})
    </insert>

    <select id="getRolesByCondition" parameterType="Map" resultType="Map">
        SELECT
            sec.name,
            fir.create_time,
            fir.id,
            fir.is_work,
            fir.number,
            fir.role_name
        FROM
            (
                SELECT
                    abc.role_name,
                    abc.id,
                    abc.create_time,
                    abc.is_work,
                    count(cdr.backend_user_id) AS number,
                    abc.create_user_id
                FROM
                    common_backend_user cda
                INNER JOIN common_backend_user_role_r cdr ON cda.id = cdr.backend_user_id
                RIGHT JOIN common_backend_user_role abc ON cdr.backend_role_id = abc.id
              where 1 =1
                <if test="roleName != null and roleName != '' ">
                    and abc.role_name like CONCAT( '%', #{roleName}, '%' )
                </if>

              GROUP BY
               abc.id
            ) fir
        LEFT JOIN
          common_backend_user sec
          ON fir.create_user_id = sec.id

    </select>

    <update id="removeRole" parameterType="String">
      DELETE
        FROM
            common_backend_user_role
        WHERE
            id = #{id}
    </update>

    <update id="updateRoleInfo" parameterType="Map">
        update
          common_backend_user_role
        set role_name = #{roleName}

        <if test="isWork != '' and isWork != null ">
          , is_work = #{isWork}
        </if>

        where id = #{id}
    </update>


    <select id="queryRolesMenuNumber" parameterType="String" resultType="Map">
		select count(id) as menuNumber from common_role_menu_rel where role_id =   #{roleId}

    </select>
    
    <insert id="updateRolePermissions" parameterType="List">
 		insert into 
 			common_role_menu_rel 
 			(role_id, menu_id) values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.roleId},#{item.menuId})
        </foreach>

    </insert>

    <delete id="deleteRoleMeunRelation" parameterType="String">
		delete from common_role_menu_rel where role_id =   #{roleId}

    </delete>
    
    <select id="queryAllMenu" resultType="Map" >
        SELECT
            mm.menu_name,
            mm.id,
            mm.menu_url as son_url,
            nn.menu_name AS parent_menu_name,
            nn.id AS parent_id,
            nn.menu_url as parent_url,
            nn.menu_icon as icon
        FROM
            common_menu mm
            LEFT JOIN common_menu nn ON mm.parent_id = nn.id
        WHERE
            mm.parent_id IS NOT NULL
        ORDER BY
            mm.id

    </select>
    
    <select id="queryRoleMenu" resultType="Map" parameterType="String">
	     SELECT
			mm.menu_name,
			mm.id,
			mm.menu_url AS son_url,
			nn.menu_name AS parent_menu_name,
			nn.id AS parent_id,
			nn.menu_url AS parent_url ,
			nn.menu_icon as icon
		FROM
			common_role_menu_rel mrr
			INNER JOIN common_menu mm ON mrr.menu_id = mm.id 
			AND mrr.role_id = #{roleId}
			LEFT JOIN common_menu nn ON mm.parent_id = nn.id 
		WHERE
			mm.parent_id IS NOT NULL 
		ORDER BY
		mm.id
    </select>

</mapper>